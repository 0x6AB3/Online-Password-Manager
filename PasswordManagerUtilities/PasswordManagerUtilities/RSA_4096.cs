using System;
using System.Collections.Generic;
using System.Text;
using System.Security.Cryptography;

namespace PasswordManagerUtilities
{
    public class RSA_4096
    {
        private RSACryptoServiceProvider rsa;

        // Finaliser that disposes of the RSACryptoServiceProvider object as it has utilises the IDisposable interface.
        ~RSA_4096()
        {
            rsa.Dispose();
        }

        // Generating a random 4096-bit asymmetric key pair and preventing it from being permanently stored on the local machine
        // (keys will be randomly generated by the server on startup and not reused incase the private key is stolen/cracked).
        public RSA_4096()
        {
            rsa = new RSACryptoServiceProvider(4096);
            rsa.PersistKeyInCsp = false;
        }

        // Getting/Setting public key.
        public void SetPublicKey(byte[] key)
        {
            rsa.ImportRSAPublicKey(key, out _);
        }

        public byte[] GetPublicKey()
        {
            return rsa.ExportRSAPublicKey();
        }

        // Both encryption and decryption use padding to ensure that the same message wont have the same ciphertext.
        // This will prevent any attackers from spotting patterns in the transmitted data and attempting to use them to their advantage.
        public byte[] Encrypt(byte[] data)
        {
            return rsa.Encrypt(data, true);
        }

        public byte[] Decrypt(byte[] data)
        {
            return rsa.Decrypt(data, true);
        }
    }
}
