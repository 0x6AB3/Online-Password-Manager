using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace PasswordManagerUtilities
{
    // Implementation of Cipher-Block-Chaining with AES. Used for encrypting and decrypting AccountData objects.
    public class AES_CBC : SymmetricAlgorithm
    {
        // On instantiation, a random 256-bit key and 128-bit IV is generated by the constructor method.
        public AES_CBC()
        {
            Key = new byte[32];
            GenerateKey();
            IV = new byte[16];
            GenerateIV();
        }
        
        
        public override byte[] Encrypt(byte[] plaintext)
        {
            // Ciphertext length is not known as encryption is done through 128-bit 'blocks'.
            byte[] ciphertext;

            // Creating an Aes object for AES-256 encryption with the CBC mode of operation.
            using (Aes aes = Aes.Create())
            {
                aes.Mode = CipherMode.CBC;
                aes.Key = Key;
                aes.IV = IV;
                
                // Creating a MemoryStream which allows for reading and writing data in main memory.
                using (MemoryStream ms = new MemoryStream())
                {
                    // Creating a CryptoStream object which allows for cryptographic operations to occur on data sent to a stream.
                    using (CryptoStream cs = new CryptoStream(ms, aes.CreateEncryptor(aes.Key, aes.IV), CryptoStreamMode.Write))
                    {
                        // Writing plaintext to the encryption stream.
                        cs.Write(plaintext);
                    }

                    // Casting the MemoryStream object into a byte array for it to be returned to the caller.
                    ciphertext = ms.ToArray();
                }
            }
            return ciphertext;
        }

        public override byte[] Decrypt(byte[] ciphertext)
        {
            byte[] plaintext;

            using (Aes aes = Aes.Create())
            {
                aes.Mode = CipherMode.CBC;
                aes.Key = Key;
                aes.IV = IV;

                using (MemoryStream ms = new MemoryStream(ciphertext))
                {
                    using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(aes.Key, aes.IV), CryptoStreamMode.Read))
                    {
                        // Using StreamReader to read the decrypted data from the MemoryStream.
                        using (StreamReader sr = new StreamReader(cs))
                        {
                            // StreamReader returns the stream as a string, encoding the string will return the raw data that was read.
                            plaintext = UTF8Encoding.UTF8.GetBytes(sr.ReadToEnd());
                        }
                    }
                }
            }
            return plaintext;
        }
    }
}
